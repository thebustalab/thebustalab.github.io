[
["index.html", "R For Chemists Chapter 1 Introduction", " R For Chemists Lucas Busta 2020-09-03 Chapter 1 Introduction "],
["installation.html", "Chapter 2 Installation 2.1 Installing R 2.2 Installing RStudio 2.3 Verifying installations 2.4 Installing the tidyverse", " Chapter 2 Installation 2.1 Installing R R is the computing language we will use to run our chemometric analyses and produce high quality plots. If you already have R installed, you can go straight to installing RStudio. If not, follow these steps to install R: Go to https://cran.r-project.org/ Click on “Download R for &lt;your operating system&gt;” (see footnote), depending on your operating system you will select “Download R for Linux”, “Download R for (Mac) OS X”, or “Download R for Windows”. footnote: We will use &lt;this notation&gt; quite a bit. It indicates a place where you should insert information, data, or something similar that corresponds to your particular situation. In this example it means insert “your operating system”, i.e. Linux, (Mac) OS X, or Windows. For Mac: download the .pkg file for the latest release. As of 8/31/2020, this is R-4.0.2.pkg. For PC: click “install R for the first time”, then click “Download R 4.0.2 for Windows”. After the executable finishes downloading (in Windows, it is a file with .exe extension; for Mac, it is a .dmg file or a .dmg inside a .pkg file), open the file as an administrator, and follow the installation instructions. R should install without any problems. You can click OK for all of the windows that pop-up during installation, and choose a “regular” installation (if given the choice). If you have trouble installing R please google “Install R Mac” or “Install R PC” and following one the many video tutorials out there. If you have tried this and are still having trouble, please contact me. 2.2 Installing RStudio Once we install R, we can install RStudio, which is essentially a convenient way of interacting with R. Some people do not like RStudio and prefer to interact with R directly. This is fine, but many beginning R users find RStudio helpful, so I recommend it. Follow these steps to install RStudio: Go to https://rstudio.com/ Click “DOWNLOAD” at the top of the page. Click the “DOWNLOAD” button that corresponds to RStudio Desktop with the free Open Source License. The page may automatically detect which operating system you are using and recommend a version for you. If it does, download that file (.exe for PC or .dmg for Mac). If not, scroll down to the “All Installers” section and download the file that is right for you. Open the file as an administrator, and follow the installation instructions. RStudio should install without any problems. You can click OK for all of the windows that pop-up during installation, and choose a “regular” installation (if given the choice). If you have trouble installing RStudio please google “Install RStudio Mac” or “Install RStudio PC” and following one the many video tutorials out there. If you have tried this and are still having trouble, please contact me. 2.3 Verifying installations Open RStudio by clicking on the appropriate file in your applications folder, or wherever it is saved on your computer. You will see several windows. One is the Code Editor, one is the R Console, one is the Workspace and History, and one is the Plots and Files window. The R Console window should have a &gt; in it. Type head(Indometh). This should display the first six lines of a data set describing the pharmacokinets of indomethacin. This is one of the built in datasets in R - you do not need any additional files to run this test. head(Indometh) ## # A tibble: 6 x 3 ## Subject time conc ## &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 0.25 1.5 ## 2 1 0.5 0.94 ## 3 1 0.75 0.78 ## 4 1 1 0.48 ## 5 1 1.25 0.37 ## 6 1 2 0.19 Next, type plot(Indometh) into the R Console. This will plot the indomethacin dataset in a basic way. plot(Indometh) If both the above commands (head(Indometh) and plot(Indometh)) worked and there were no error messages during installation, then you should be ready to proceed. 2.4 Installing the tidyverse For us to run our analyses, we need to install a set of add-on functions that expand R’s capabilities. These functions are collected in something called the tidyverse, a very well-known and widely-used R package developed by Hadley Wickham. You do not need to manually download anything to complete this installation - R will do it for you. In the R Console, type install.packages(&quot;tidyverse&quot;, repos = &quot;http://cran.us.r-project.org&quot;) to install the tidyverse. RSudio might ask you: “Do you want to install from sources the packages which need compilation? (Yes/no/cancel)”, for now, type no and press enter. install.packages(&quot;tidyverse&quot;, repos = &quot;http://cran.us.r-project.org&quot;) ## ## The downloaded binary packages are in ## /var/folders/d4/m9ll00q10hdd6kz0vk9q0nx80000gn/T//RtmpExJdaJ/downloaded_packages Let’s make sure your version of the tidyverse is installed correctly. To do this, we will load the tidyverse library/package inside of an R session. We can do this using library(tidyverse). Let’s try it: library(tidyverse) ## ── Attaching packages ────────────────────────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.2.1 ✓ purrr 0.3.3 ## ✓ tibble 2.1.3 ✓ dplyr 0.8.4 ## ✓ tidyr 1.0.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.4.0 ## ── Conflicts ───────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() If the library load correctly - then you are set to go! If not, try updating your R / RStudio installations, the reinstalling the tidyverse. If this still fails, please contact me. "],
["R-Basics-1.html", "Chapter 3 R Basics 1 3.1 Before we start… 3.2 Functions 3.3 Objects", " Chapter 3 R Basics 1 Now that we’ve got R, RStudio, and the tidyverse installed, we’re going to look at a few core concepts in R. 3.1 Before we start… 3.1.1 Help Throughout your time with R, you will probably want help. I ceratinly do. You can use a question mark ? to get help with many different concepts. You can just put it in front of the thing you want help with. We’ll see an example in just a minute… 3.1.2 Syntax Throughout this book, we’ll use this &lt;notation&gt; to indicate a place where the requested item that corresponds to your situation. For example, if I am instructed to run this command: print(&quot;&lt;your_name_here&gt;&quot;), I would type: print(&quot;Luke&quot;) ## [1] &quot;Luke&quot; Computers are very powerful but can be dumb at times. They are not very good with unexpected characters - they are often particularly sensitive when it comes to spaces , slashes \\ /, equal signs = (vs. ==), and quotes &quot;. This book will try to warn you when syntax issues may arise. To try and prevent issues, this book will also use snake case (see the image below) - consider doing the same to avoid problems! 3.1.3 Paths To analyze data on your own computer, you will need to know the “path” to your data. This is essentially the street address of your data on your computer’s hard drive. Paths look different on Mac and PC. On Mac: /Users/lucasbusta/Documents/sample_data_set.csv (note the forward slashes!) On PC: C:\\My Computer\\Documents\\sample_data_set.csv (note the backward slashes!) You can quickly find paths to files via the following: On Mac: Locate the file in Finder. Right-click on the file, hold the Option key, then click “Copy as Pathname” On PC: Locate the file in Windows Explorer. Hold down the Shift key then right-click on the file. Click “Copy As Path” On either operating system, if you don’t want to type paths into your command line, another option is to define the following function within your R Session. You can do that by pasting the line below into your R Console and pressing enter. readCSV &lt;- function() { return(readr::read_csv(file.choose())) } Once that is done, you can use the command readCSV() to open up a navigation window and select your file that way. Cool! 3.2 Functions Ok, we’ve got some bookkeeping out of the way. Let’s get down to working with data! For this we need functions: A function is a command that tells R to perform an action! A function begins and ends with parentheses: this_is_a_function() The stuff inside the parentheses are the details of how you want the function to perform its action: run_this_analysis(on_this_data) Let’s illustrate this with an example. We’re going to use a function from the tidyverse called read_csv. This means we need to first load the tidyverse. We’ll use it to read some data from a path on our computer. This is a link to the original, untidied version of the data, but you can download a tidied version of the data by clicking here. We’re going to import that tidied version (not the original, untidied version) using the read_csv command. We’ll run read_csv(&quot;&lt;path_to_your_data&gt;&quot;). Note the use of QUOTES &quot;&quot;! Those are necessary. Also make sure your path uses the appropriate direction of slashes for your operating system. library(tidyverse) read_csv(&quot;https://thebustalab.github.io/R_For_Chemists/sample_data/algae_data.csv&quot;) ## Parsed with column specification: ## cols( ## replicate = col_double(), ## algae_strain = col_character(), ## harvesting_regime = col_character(), ## chemical_species = col_character(), ## abundance = col_double() ## ) ## # A tibble: 180 x 5 ## replicate algae_strain harvesting_regime chemical_species abundance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Tsv1 Heavy FAs 520. ## 2 1 Tsv1 Heavy saturated_Fas 123. ## 3 1 Tsv1 Heavy omega_3_polyunsatura… 186. ## 4 1 Tsv1 Heavy monounsaturated_Fas 28.4 ## 5 1 Tsv1 Heavy polyunsaturated_Fas 369. ## 6 1 Tsv1 Heavy omega_6_polyunsatura… 183. ## 7 1 Tsv1 Heavy lysine 84.1 ## 8 1 Tsv1 Heavy methionine 24.1 ## 9 1 Tsv1 Heavy essential_Aas 692. ## 10 1 Tsv1 Heavy non_essential_Aas 919. ## # … with 170 more rows ** Note, we also could have imported this data by using readCSV() and then navigating to and selecting our file. 3.3 Objects You can think of objects as if they were “files” inside an R session where information can be stored. Let’s try making an object. All we have to do is use &lt;- to send the information from our read_csv command into a new object. This will create the object. See the example below. algae_chemistry &lt;- read_csv(&quot;https://thebustalab.github.io/R_For_Chemists/sample_data/algae_data.csv&quot;) ## Parsed with column specification: ## cols( ## replicate = col_double(), ## algae_strain = col_character(), ## harvesting_regime = col_character(), ## chemical_species = col_character(), ## abundance = col_double() ## ) # Alternative: # algae_chemistry &lt;- readCSV() Now we have an object called algae_chemistry. We can examine the contents of that object by typing its name. For example: algae_chemistry ## # A tibble: 180 x 5 ## replicate algae_strain harvesting_regime chemical_species abundance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Tsv1 Heavy FAs 520. ## 2 1 Tsv1 Heavy saturated_Fas 123. ## 3 1 Tsv1 Heavy omega_3_polyunsatura… 186. ## 4 1 Tsv1 Heavy monounsaturated_Fas 28.4 ## 5 1 Tsv1 Heavy polyunsaturated_Fas 369. ## 6 1 Tsv1 Heavy omega_6_polyunsatura… 183. ## 7 1 Tsv1 Heavy lysine 84.1 ## 8 1 Tsv1 Heavy methionine 24.1 ## 9 1 Tsv1 Heavy essential_Aas 692. ## 10 1 Tsv1 Heavy non_essential_Aas 919. ## # … with 170 more rows Cool! However, this is a pretty big object. For our next chapter on visualization, it would be nice to have a smaller dataset object to work with. Let’s use another tidyverse command called filter to filter the algae_chemistry object. We will need to tell the filter command what to filter out using “logical predicates” (things like equal to: ==, less than: &lt;, greater than: &gt;, greater-than-or-equal-to: &lt;=, etc.). Let’s filter algae_chemistry so that only rows where the chemical_species is equal to FAs (fatty acids) is preserved. This will look like chemical_species == &quot;FAs&quot;. Here we go: filter(algae_chemistry, chemical_species == &quot;FAs&quot;) ## # A tibble: 18 x 5 ## replicate algae_strain harvesting_regime chemical_species abundance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Tsv1 Heavy FAs 520. ## 2 2 Tsv1 Heavy FAs 450. ## 3 3 Tsv1 Heavy FAs 514. ## 4 1 Tsv1 Light FAs 580. ## 5 2 Tsv1 Light FAs 535. ## 6 3 Tsv1 Light FAs 513. ## 7 1 Tsv2 Heavy FAs 373. ## 8 2 Tsv2 Heavy FAs 409. ## 9 3 Tsv2 Heavy FAs 390. ## 10 1 Tsv2 Light FAs 490. ## 11 2 Tsv2 Light FAs 541. ## 12 3 Tsv2 Light FAs 461. ## 13 1 Tsv11 Heavy FAs 474. ## 14 2 Tsv11 Heavy FAs 331. ## 15 3 Tsv11 Heavy FAs 530. ## 16 1 Tsv11 Light FAs 526. ## 17 2 Tsv11 Light FAs 514. ## 18 3 Tsv11 Light FAs 544. Cool! Now it’s just showing us the 18 rows where the chemical_species is fatty acids (FAs). Let’s write this new, smaller dataset into a new object. For that we use &lt;-, remember? algae_data_small &lt;- filter(algae_chemistry, chemical_species == &quot;FAs&quot;) Now we have a nice, small table that we can use to practice data visualization. We’ll do that in the next chapter. "],
["Visualization-1.html", "Chapter 4 Visualization 1 4.1 Setting up a ggplot 4.2 Geoms", " Chapter 4 Visualization 1 For visualization, we’re going to use ggplot2 - a powerful set of commands for plot generation. Let’s make sure we’ve got our data from the last chapter active in our current session: library(tidyverse) algae_chemistry &lt;- read_csv(&quot;https://thebustalab.github.io/R_For_Chemists/sample_data/algae_data.csv&quot;) ## Parsed with column specification: ## cols( ## replicate = col_double(), ## algae_strain = col_character(), ## harvesting_regime = col_character(), ## chemical_species = col_character(), ## abundance = col_double() ## ) algae_chemistry_small &lt;- filter(algae_chemistry, chemical_species == &quot;FAs&quot;) algae_chemistry_small ## # A tibble: 18 x 5 ## replicate algae_strain harvesting_regime chemical_species abundance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Tsv1 Heavy FAs 520. ## 2 2 Tsv1 Heavy FAs 450. ## 3 3 Tsv1 Heavy FAs 514. ## 4 1 Tsv1 Light FAs 580. ## 5 2 Tsv1 Light FAs 535. ## 6 3 Tsv1 Light FAs 513. ## 7 1 Tsv2 Heavy FAs 373. ## 8 2 Tsv2 Heavy FAs 409. ## 9 3 Tsv2 Heavy FAs 390. ## 10 1 Tsv2 Light FAs 490. ## 11 2 Tsv2 Light FAs 541. ## 12 3 Tsv2 Light FAs 461. ## 13 1 Tsv11 Heavy FAs 474. ## 14 2 Tsv11 Heavy FAs 331. ## 15 3 Tsv11 Heavy FAs 530. ## 16 1 Tsv11 Light FAs 526. ## 17 2 Tsv11 Light FAs 514. ## 18 3 Tsv11 Light FAs 544. Great! Looks like we’re ready to go. 4.1 Setting up a ggplot There are three steps to setting up a ggplot: 4.1.1 Step 1: Define the data you want to use. We do this using the ggplot function’s data argument. When we run that line, it just shows a grey plot space. Why is this? It’s because all we’ve done is told ggplot that (i) we want to make a plot and (ii) what data should be used. We haven’t explained how to represent features of the data using ink. ggplot(data = algae_chemistry_small) 4.1.2 Step 2: Define how your variables map onto the axes. This is called aesthetic mapping and is done with the aes() function. aes() should be placed inside the ggplot command. Now when we run it, we get our axes! ggplot(data = algae_chemistry_small, aes(x = algae_strain, y = abundance)) 4.1.3 Step 3: Use geometric shapes to represent other variables in your data. Map your variables onto the geometric features of the shapes. To define which shape should be used, use a geom_* command. Some options are, for example, geom_point(), geom_boxplot(), and geom_violin(). These functions should be added to your plot using the + sign. We can use a new line to keep the code from getting too wide, just make sure the + sign is at the end fo the top line. Again, use aes() to map your variables onto the geometric features of the shapes. Let’s try it: ggplot(data = algae_chemistry_small, aes(x = algae_strain, y = abundance)) + geom_point(aes(color = harvesting_regime)) 4.2 Geoms 4.2.1 Modifying geoms In the last plot in the previous section, the points were a bit small, how could we fix that? We can modify the features of the shapes by adding additional arguments to the geom_*() functions. To change the size of the points created by the geom_point() function, this means that we need to add the size = argument. Here’s an example: ggplot(data = algae_chemistry_small, aes(x = algae_strain, y = abundance)) + geom_point(aes(color = harvesting_regime), size = 5) One powerful aspect of ggplot is the ability to quickly change mappings to see if alternative plots are more effective at bringing out the trends in the data. For example, we could modify the plot above by switching how harvesting_regime is mapped: ggplot(data = algae_chemistry_small, aes(x = algae_strain, y = abundance)) + geom_point(aes(size = harvesting_regime), color = &quot;black&quot;) ** Important note: Inside the aes() function, map aesthetics (the features of the geom’s shape) to a variable. Outside the aes() function, map aesthetics to constants. You can see this in the above two plots - in the first one, color is inside aes() and mapped to the variable called harvesting_regime, while size is outside the aes() call and is set to the constant 5. In the second plot, the situation is reversed, with size being inside the aes() function and mapped to the variable harvesting_regime, while color is outside the aes() call and is mapped to the constant “black”. 4.2.2 Using multiple geoms We can also stack geoms on top of one another by using multiple + signs. We also don’t have to assign the same mappings to each geom. ggplot(data = algae_chemistry_small, aes(x = algae_strain, y = abundance)) + geom_violin() + geom_point(aes(color = harvesting_regime), size = 5) As you can probably guess right now, there are lots of mappings that can be done, and lots of different ways to look at the same data! ggplot(data = algae_chemistry_small, aes(x = algae_strain, y = abundance)) + geom_violin(aes(fill = algae_strain)) + geom_point(aes(color = harvesting_regime, size = replicate)) "],
["Exercises-1.html", "Chapter 5 Exercises 1 5.1 Part 1: The Algae Dataset", " Chapter 5 Exercises 1 In this set of exercises we’re going to practice importing, filtering, and plotting data. We’re going to work with two datasets: (i) algae_chemistry_data.csv and (ii) alaska_lake_data.csv. By clicking on those links you can download each dataset. For these exercises, you will write your code and answers to any questions in the RStudio script editor, then you will save that file and send it to me. That file comprises your submission for this assignment. I should be able to open and run the file on my computer (after changing the pathnames, if any - so don’t worry about compatibility for those). The file should contain both the code that can perform the actions described below and text that specifies the answers to the questions asked below 5.1 Part 1: The Algae Dataset 5.1.1 Question 1: Importing data Import the algae chemistry data. Remember that read_csv() is part of the tidyverse, so that library needs to be loaded into your R session. Also remember that another option is to paste and run readCSV &lt;- function() { return(readr::read_csv(file.choose())) } in your R Console, which then gives you access to the function readCSV(). That command doesn’t require an input path, so you don’t need to mess around with slashes and quotes. If you need examples of how to import data, please see the R Basics 1 section of this book. 5.1.2 Question 2: Dataset dimensions How many rows and columns does the algae chemistry dataset have? (hint: when you display the dataset on your screen by typing its name into the console, dimensions are also displayed). Write the answer to this question in your R Script right below the code you use to find the answer. 5.1.3 Question 3: Objects Import the algae chemistry data and send it into a new object called algae_chemistry_data. Remember about &lt;-. See the R Basics 1 section of this book if you need help. 5.1.4 Question 4: Filtering 5.1.4.1 A Now that you have the algae data imported and stored in an object called algae_chemistry_data, filter the data so that only entries are shown for which the chemical_species is “FAs”. What are the dimensions (i.e. number of rows and columns) of the resulting dataset? 5.1.4.2 B Now filter the dataset so that only entries for the algae_strain “Tsv1” are shown. What are the dimensions of the resulting dataset? 5.1.4.3 C Now filter the dataset so that only entries with an abundance greater than 250 are shown. Note that &gt; can be used in the filter command instead of ==, and that numbers inside a filter command do not require quotes around them. What are the dimensions of the resulting dataset? 5.1.5 Question 5: Plotting Make a ggplot that has algae_strain on the x axis and abundance on the y axis. Remember about aes(). Use points (geom_point()) to represent each compound. You don’t need to color the points. If you need a refresher on how to make a ggplot, please refer to the Visualization 1 Section of this book. Which algae strain has the most abundant compound out of all the compounds in the dataset? 5.1.6 Question 6: Plotting Make a ggplot that has abundance on the x axis and chemical_species on the y axis. Use points to represent each compound. You don’t need to color the points. Generally speaking, what are the two most abundant classes of chemical species in these algae strains? (FAs/Fas stand for fatty acids, AAs/Aas stand for amino acids.) 5.1.7 Question 7: Filtering and plotting I am going to show you an example of how you can filter and plot at the same time: library(tidyverse) algae_chemistry_data &lt;- read_csv(&quot;https://thebustalab.github.io/R_For_Chemists/sample_data/algae_data.csv&quot;) ## Parsed with column specification: ## cols( ## replicate = col_double(), ## algae_strain = col_character(), ## harvesting_regime = col_character(), ## chemical_species = col_character(), ## abundance = col_double() ## ) ggplot(data = filter(algae_chemistry_data, chemical_species == &quot;essential_Aas&quot;), aes(x = algae_strain, y = abundance)) + geom_point() Using the above as a template, make a plot that shows just omega_3_polyunsaturated_Fas, with algae_strain on the x axis, and abundance on the y axis. Color the points so that they correspond to harvesting_regime. Remember that mapping a feature of a shape onto a variable must be done inside aes(). Change the plot so that all the points are size = 5. Remember that mapping features of a shape to a constant needs to be done outside aes(). Which harvesting regime leads to higher levels of omega_3_polyunsaturated_Fas? 5.1.8 Question 8: Filtering and plotting 5.1.9 Question 9: Open-ended plotting Make a plot that checks to see which chemical_species were more abundant under light as opposed to heavy harvesting_regime in all three replicates. Use filtered data so that just one algae_strain is shown, an x and a y axis, and points to represent the measurements. Make the points size = 5 and also set the point’s alpha = 0.6. The points should be colored according to harvesting_regime. Make 3 plots, one for each strain of algae. 5.1.10 Question 10: A peek at what’s to come… Take the code that you made for Question 9. Remove the filtering. Add the following line to the end of the plot: facet_grid(.~algae_strain). Remember that adding things to plots is done with the + sign, so your code should look something like: ggplot(data = algae_chemistry_data, aes(x = &lt;something&gt;, y = &lt;something else&gt;)) + geom_point(aes(&lt;some things&gt;), &lt;some here too&gt;) + facet_grid(.~algae_strain) Also try, instead of facet_grid(.~algae_strain), facet_grid(algae_strain~.) at the end of you plot command. (note the swap in the position of the .~ relative to algae_strain). This means your code should look something like: ggplot(data = algae_chemistry_data, aes(x = &lt;something&gt;, y = &lt;something else&gt;)) + geom_point(aes(&lt;some things&gt;), &lt;some here too&gt;) + facet_grid(algae_strain~.) What advantages does this one extra line provide over what you had to do in question 9? "]
]
