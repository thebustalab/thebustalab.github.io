[
["r-basics-1.html", "Chapter 3 R Basics 1 3.1 Before we start… 3.2 Functions 3.3 Objects", " Chapter 3 R Basics 1 Now that we’ve got R, RStudio, and the tidyverse installed, we’re going to look at a few core concepts in R. 3.1 Before we start… 3.1.1 Help Throughout your time with R, you will probably want help. I ceratinly do. You can use a question mark ? to get help with many different concepts. You can just put it in front of the thing you want help with. We’ll see an example in just a minute… 3.1.2 Syntax Throughout this book, we’ll use this &lt;notation&gt; to indicate a place where the requested item that corresponds to your situation. For example, if I am instructed to run this command: print(&quot;&lt;your_name_here&gt;&quot;), I would type: print(&quot;Luke&quot;) ## [1] &quot;Luke&quot; Computers are very powerful but can be dumb at times. They are not very good with unexpected characters - they are often particularly sensitive when it comes to spaces , slashes \\ /, equal signs = (vs. ==), and quotes &quot;. This book will try to warn you when syntax issues may arise. To try and prevent issues, this book will also use snake case (see the image below) - consider doing the same to avoid problems! 3.1.3 Paths To analyze data on your own computer, you will need to know the “path” to your data. This is essentially the street address of your data on your computer’s hard drive. Paths look different on Mac and PC. On Mac: /Users/lucasbusta/Documents/sample_data_set.csv (note the forward slashes!) On PC: C:\\My Computer\\Documents\\sample_data_set.csv (note the backward slashes!) You can quickly find paths to files via the following: On Mac: Locate the file in Finder. Right-click on the file, hold the Option key, then click “Copy as Pathname” On PC: Locate the file in Windows Explorer. Hold down the Shift key then right-click on the file. Click “Copy As Path” On either operating system, if you don’t want to type paths into your command line, another option is to define the following function within your R Session. You can do that by pasting the line below into your R Console and pressing enter. readCSV &lt;- function() { return(readr::read_csv(file.choose())) } Once that is done, you can use the command readCSV() to open up a navigation window and select your file that way. Cool! 3.2 Functions Ok, we’ve got some bookkeeping out of the way. Let’s get down to working with data! For this we need functions: A function is a command that tells R to perform an action! A function begins and ends with parentheses: this_is_a_function() The stuff inside the parentheses are the details of how you want the function to perform its action: run_this_analysis(on_this_data) Let’s illustrate this with an example. We’re going to use a function from the tidyverse called read_csv. This means we need to first load the tidyverse. We’ll use it to read some data from a path on our computer. This is a link to the original, untidied version of the data, but you can download a tidied version of the data by clicking here. We’re going to import that tidied version (not the original, untidied version) using the read_csv command. We’ll run read_csv(&quot;&lt;path_to_your_data&gt;&quot;). Note the use of QUOTES &quot;&quot;! Those are necessary. Also make sure your path uses the appropriate direction of slashes for your operating system. library(tidyverse) ## ── Attaching packages ─────────────────────────────────────────────────────────────────────────────────────── tidyverse 1.3.0 ── ## ✓ ggplot2 3.2.1 ✓ purrr 0.3.3 ## ✓ tibble 2.1.3 ✓ dplyr 0.8.4 ## ✓ tidyr 1.0.2 ✓ stringr 1.4.0 ## ✓ readr 1.3.1 ✓ forcats 0.4.0 ## ── Conflicts ────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() read_csv(&quot;https://thebustalab.github.io/R_For_Chemists/sample_data/algae_data.csv&quot;) ## Parsed with column specification: ## cols( ## replicate = col_double(), ## algae_strain = col_character(), ## harvesting_regime = col_character(), ## chemical_species = col_character(), ## abundance = col_double() ## ) ## # A tibble: 180 x 5 ## replicate algae_strain harvesting_regime chemical_species abundance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Tsv1 Heavy FAs 520. ## 2 1 Tsv1 Heavy saturated_Fas 123. ## 3 1 Tsv1 Heavy omega_3_polyunsatura… 186. ## 4 1 Tsv1 Heavy monounsaturated_Fas 28.4 ## 5 1 Tsv1 Heavy polyunsaturated_Fas 369. ## 6 1 Tsv1 Heavy omega_6_polyunsatura… 183. ## 7 1 Tsv1 Heavy lysine 84.1 ## 8 1 Tsv1 Heavy methionine 24.1 ## 9 1 Tsv1 Heavy essential_Aas 692. ## 10 1 Tsv1 Heavy non_essential_Aas 919. ## # … with 170 more rows ** Note, we also could have imported this data by using readCSV() and then navigating to and selecting our file. 3.3 Objects You can think of objects as if they were “files” inside an R session where information can be stored. Let’s try making an object. All we have to do is use &lt;- to send the information from our read_csv command into a new object. This will create the object. See the example below. algae_chemistry &lt;- read_csv(&quot;/Users/lucasbusta/Desktop/algae_data.csv&quot;) ## Parsed with column specification: ## cols( ## replicate = col_double(), ## algae_strain = col_character(), ## harvesting_regime = col_character(), ## chemical_species = col_character(), ## abundance = col_double() ## ) # Alternative: # algae_chemistry &lt;- readCSV() Now we have an object called algae_chemistry. We can examine the contents of that object by typing its name. For example: algae_chemistry ## # A tibble: 180 x 5 ## replicate algae_strain harvesting_regime chemical_species abundance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Tsv1 Heavy FAs 520. ## 2 1 Tsv1 Heavy saturated_Fas 123. ## 3 1 Tsv1 Heavy omega_3_polyunsatura… 186. ## 4 1 Tsv1 Heavy monounsaturated_Fas 28.4 ## 5 1 Tsv1 Heavy polyunsaturated_Fas 369. ## 6 1 Tsv1 Heavy omega_6_polyunsatura… 183. ## 7 1 Tsv1 Heavy lysine 84.1 ## 8 1 Tsv1 Heavy methionine 24.1 ## 9 1 Tsv1 Heavy essential_Aas 692. ## 10 1 Tsv1 Heavy non_essential_Aas 919. ## # … with 170 more rows Cool! However, this is a pretty big object. For our next chapter on visualization, it would be nice to have a smaller dataset object to work with. Let’s use another tidyverse command called filter to filter the algae_chemistry object. We will need to tell the filter command what to filter out using “logical predicates” (things like equal to: ==, less than: &lt;, greater than: &gt;, greater-than-or-equal-to: &lt;=, etc.). Let’s filter algae_chemistry so that only rows where the chemical_species is equal to FAs (fatty acids) is preserved. This will look like chemical_species == &quot;FAs&quot;. Here we go: filter(algae_chemistry, chemical_species == &quot;FAs&quot;) ## # A tibble: 18 x 5 ## replicate algae_strain harvesting_regime chemical_species abundance ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1 Tsv1 Heavy FAs 520. ## 2 2 Tsv1 Heavy FAs 450. ## 3 3 Tsv1 Heavy FAs 514. ## 4 1 Tsv1 Light FAs 580. ## 5 2 Tsv1 Light FAs 535. ## 6 3 Tsv1 Light FAs 513. ## 7 1 Tsv2 Heavy FAs 373. ## 8 2 Tsv2 Heavy FAs 409. ## 9 3 Tsv2 Heavy FAs 390. ## 10 1 Tsv2 Light FAs 490. ## 11 2 Tsv2 Light FAs 541. ## 12 3 Tsv2 Light FAs 461. ## 13 1 Tsv11 Heavy FAs 474. ## 14 2 Tsv11 Heavy FAs 331. ## 15 3 Tsv11 Heavy FAs 530. ## 16 1 Tsv11 Light FAs 526. ## 17 2 Tsv11 Light FAs 514. ## 18 3 Tsv11 Light FAs 544. Cool! Now it’s just showing us the 18 rows where the chemical_species is fatty acids (FAs). Let’s write this new, smaller dataset into a new object. For that we use &lt;-, remember? algae_data_small &lt;- filter(algae_chemistry, chemical_species == &quot;FAs&quot;) Now we have a nice, small table that we can use to practice data visualization. We’ll do that in the next chapter. "]
]
