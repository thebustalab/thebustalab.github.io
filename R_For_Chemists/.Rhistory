analysis = c("hclust"),
column_w_names_of_nultiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
) {
# Check that column names are spelled correctly
if( any(
!c(
column_w_names_of_nultiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
) %in% colnames(data)
) == TRUE
) {
stop("There is a mismatch in the column names delivered to the command and the column names in your data. Please double check the spelling of your column names you gave to the command.")
}
# Add analyte_unique_ID_column if necessary
# if( length(columns_for_analyte_unique_ID) > 1 ) {
#add analyte_unique_ID column if necessary
# }
# Remove columns that are not included in input column lists
if (length(
which(!colnames(data) %in%
c(
column_w_names_of_nultiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)
) > 0
) {
data <- data[,-which(!colnames(data) %in%
c(
column_w_names_of_nultiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)]
}
# Remove analyte annotation columns before pivoting
if( length(columns_w_additional_analyte_info) > 0 ) {
analyte_annotation_free_data <- data[,-match(columns_w_additional_analyte_info, colnames(data))]
} else {
analyte_annotation_free_data <- data
}
# If no pivot required, skip pivoting
if( length(column_w_names_of_nultiple_analytes) == 0 & length(columns_w_values_for_single_analyte) >= 1 ) {
data_wide <- analyte_annotation_free_data
analyte_columns <- columns_w_values_for_single_analyte
}
# If pivoting require, pivot_wider any long-style data
if( length(column_w_names_of_nultiple_analytes) == 1 ) {
data_wide <- pivot_wider(
analyte_annotation_free_data,
names_from = all_of(column_w_names_of_nultiple_analytes),
values_from = all_of(column_w_values_for_multiple_analytes)
)
analyte_columns <- unlist(unique(analyte_annotation_free_data[,colnames(analyte_annotation_free_data) == column_w_names_of_nultiple_analytes]))
analyte_columns <- c(columns_w_values_for_single_analyte, analyte_columns)
}
# Add sample_unique_ID_column if necessary, or just change column name of existing sample_unique_ID column
if( length(columns_w_sample_ID_info) > 1 ) {
sample_unique_IDs <- apply(
data_wide[,match(columns_w_sample_ID_info, colnames(data_wide))],
1, paste, collapse = "_"
)
if( any(duplicated(sample_unique_IDs)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
data_wide$sample_unique_ID <- sample_unique_IDs
} else {
colnames(data_wide)[colnames(data_wide) == columns_w_sample_ID_info] <- "sample_unique_ID"
if( any(duplicated(data_wide$sample_unique_ID)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
}
# Clustering analysis
# Prepare the matrix
matrix <- as.matrix(data_wide[,match(analyte_columns, colnames(data_wide))])
rownames(matrix) <- data_wide$sample_unique_ID
# Run hclust, if requested
if( analysis == "hclust" ) {
clustering <- ggplot2::fortify(ape::as.phylo(stats::hclust(stats::dist(matrix))))
clustering$sample_unique_ID <- clustering$label
}
# Add back annotations to the output
clustering <- full_join(
data_wide[,match(c(columns_w_sample_ID_info, "sample_unique_ID"), colnames(data_wide))],
clustering,
by = "sample_unique_ID"
)
rownames_matrix <- tibble::enframe(rownames(matrix), name = NULL)
colnames(rownames_matrix)[1] <- "sample_unique_ID"
clustering <- full_join(
clustering,
as_tibble(cbind(rownames_matrix, as_tibble(matrix))),
by = "sample_unique_ID"
)
clustering
# Return results
return( clustering )
}
runMatrixAnalysis(
data = algae_data,
analysis = c("hclust"),
column_w_names_of_nultiple_analytes = "chemical_species",
column_w_values_for_multiple_analytes = "abundance",
columns_w_values_for_single_analyte = NULL,
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("replicte", "algae_strain", "harvesting_regime")
)
runMatrixAnalysis(
data = algae_data,
analysis = c("hclust"),
column_w_names_of_nultiple_analytes = "chemical_species",
column_w_values_for_multiple_analytes = "abundance",
columns_w_values_for_single_analyte = NULL,
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("replicate", "algae_strain", "harvesting_regime")
)
algae_data_clustered <- runMatrixAnalysis(
data = algae_data,
analysis = c("hclust"),
column_w_names_of_nultiple_analytes = "chemical_species",
column_w_values_for_multiple_analytes = "abundance",
columns_w_values_for_single_analyte = NULL,
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("replicate", "algae_strain", "harvesting_regime")
)
ggtree(tr = algae_data_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(data = algae_data_clustered, shape = 21, aes(fill = algae_strain), size = 4) +
theme_classic() +
coord_cartesian(xlim = c(0,450))
solvents <- read_csv("/Users/lucasbusta/Documents/Science/Website/thebustalab.github.io/R_For_Chemists/sample_data/solvents.csv")
head(solvents)
runMatrixAnalysis(
data = solvents,
analysis = c("hclust"),
column_w_names_of_multiple_analytes = NULL,
column_w_values_for_multiple_analytes = NULL,
columns_w_values_for_single_analyte = c("boiling_point", "melting_point", "density", "solubility_in_water", "relative_polarity", "vapor_pressure", "formula_weight", "refractive_index", "specific_gravity"),,
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("solvent", "formula", "category", "miscible_with_water", "CAS_number")
)
#### runMatrixAnalysis
#' Runs a matrix analysis (clustering, kmeans, pca).
#'
#' @param data The data.frame or tibble to use.
#' @param analysis
#' @param column_w_names_of_multiple_analytes
#' @param column_w_values_for_multiple_analytes
#' @param columns_w_values_for_single_analyte
#' @param columns_w_additional_analyte_info
#' @param columns_for_sample_unique_ID
#' @param columns_w_sample_annotation_info
#' @examples
#' @export
#' runMatrixAnalysis
runMatrixAnalysis <-    function(
data,
analysis = c("hclust"),
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
) {
# Check that column names are spelled correctly
if( any(
!c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
) %in% colnames(data)
) == TRUE
) {
stop("There is a mismatch in the column names delivered to the command and the column names in your data. Please double check the spelling of your column names you gave to the command.")
}
# Add analyte_unique_ID_column if necessary
# if( length(columns_for_analyte_unique_ID) > 1 ) {
#add analyte_unique_ID column if necessary
# }
# Remove columns that are not included in input column lists
if (length(
which(!colnames(data) %in%
c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)
) > 0
) {
data <- data[,-which(!colnames(data) %in%
c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)]
}
# Remove analyte annotation columns before pivoting
if( length(columns_w_additional_analyte_info) > 0 ) {
analyte_annotation_free_data <- data[,-match(columns_w_additional_analyte_info, colnames(data))]
} else {
analyte_annotation_free_data <- data
}
# If no pivot required, skip pivoting
if( length(column_w_names_of_multiple_analytes) == 0 & length(columns_w_values_for_single_analyte) >= 1 ) {
data_wide <- analyte_annotation_free_data
analyte_columns <- columns_w_values_for_single_analyte
}
# If pivoting require, pivot_wider any long-style data
if( length(column_w_names_of_multiple_analytes) == 1 ) {
data_wide <- pivot_wider(
analyte_annotation_free_data,
names_from = all_of(column_w_names_of_multiple_analytes),
values_from = all_of(column_w_values_for_multiple_analytes)
)
analyte_columns <- unlist(unique(analyte_annotation_free_data[,colnames(analyte_annotation_free_data) == column_w_names_of_multiple_analytes]))
analyte_columns <- c(columns_w_values_for_single_analyte, analyte_columns)
}
# Add sample_unique_ID_column if necessary, or just change column name of existing sample_unique_ID column
if( length(columns_w_sample_ID_info) > 1 ) {
sample_unique_IDs <- apply(
data_wide[,match(columns_w_sample_ID_info, colnames(data_wide))],
1, paste, collapse = "_"
)
if( any(duplicated(sample_unique_IDs)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
data_wide$sample_unique_ID <- sample_unique_IDs
} else {
colnames(data_wide)[colnames(data_wide) == columns_w_sample_ID_info] <- "sample_unique_ID"
if( any(duplicated(data_wide$sample_unique_ID)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
}
# Clustering analysis
# Prepare the matrix
matrix <- as.matrix(data_wide[,match(analyte_columns, colnames(data_wide))])
rownames(matrix) <- data_wide$sample_unique_ID
# Run hclust, if requested
if( analysis == "hclust" ) {
clustering <- ggplot2::fortify(ape::as.phylo(stats::hclust(stats::dist(matrix))))
clustering$sample_unique_ID <- clustering$label
}
# Add back annotations to the output
clustering <- full_join(
data_wide[,match(c(columns_w_sample_ID_info, "sample_unique_ID"), colnames(data_wide))],
clustering,
by = "sample_unique_ID"
)
rownames_matrix <- tibble::enframe(rownames(matrix), name = NULL)
colnames(rownames_matrix)[1] <- "sample_unique_ID"
clustering <- full_join(
clustering,
as_tibble(cbind(rownames_matrix, as_tibble(matrix))),
by = "sample_unique_ID"
)
clustering
# Return results
return( clustering )
}
runMatrixAnalysis(
data = solvents,
analysis = c("hclust"),
column_w_names_of_multiple_analytes = NULL,
column_w_values_for_multiple_analytes = NULL,
columns_w_values_for_single_analyte = c("boiling_point", "melting_point", "density", "solubility_in_water", "relative_polarity", "vapor_pressure", "formula_weight", "refractive_index", "specific_gravity"),,
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("solvent", "formula", "category", "miscible_with_water", "CAS_number")
)
runMatrixAnalysis(
data = solvents,
analysis = c("hclust"),
column_w_names_of_multiple_analytes = NULL,
column_w_values_for_multiple_analytes = NULL,
columns_w_values_for_single_analyte = c("boiling_point", "melting_point", "density", "solubility_in_water", "relative_polarity", "vapor_pressure", "formula_weight", "refractive_index", "specific_gravity"),
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("solvent", "formula", "category", "miscible_with_water", "CAS_number")
)
solvents_clustered <- runMatrixAnalysis(
data = solvents,
analysis = c("hclust"),
column_w_names_of_multiple_analytes = NULL,
column_w_values_for_multiple_analytes = NULL,
columns_w_values_for_single_analyte = c("boiling_point", "melting_point", "density", "solubility_in_water", "relative_polarity", "vapor_pressure", "formula_weight", "refractive_index", "specific_gravity"),
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("solvent", "formula", "category", "miscible_with_water", "CAS_number")
)
ggtree(tr = solvents_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(data = solvents_clustered, shape = 21, aes(fill = boiling_point), size = 4) +
theme_classic() +
coord_cartesian(xlim = c(0,450))
#### runMatrixAnalysis
#' Runs a matrix analysis (clustering, kmeans, pca).
#'
#' @param data The data.frame or tibble to use.
#' @param analysis
#' @param column_w_names_of_multiple_analytes
#' @param column_w_values_for_multiple_analytes
#' @param columns_w_values_for_single_analyte
#' @param columns_w_additional_analyte_info
#' @param columns_for_sample_unique_ID
#' @param columns_w_sample_annotation_info
#' @examples
#' @export
#' runMatrixAnalysis
runMatrixAnalysis <-    function(
data,
analysis = c("hclust"),
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
) {
# Check that column names are spelled correctly
if( any(
!c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
) %in% colnames(data)
) == TRUE
) {
stop("There is a mismatch in the column names delivered to the command and the column names in your data. Please double check the spelling of your column names you gave to the command.")
}
# Add analyte_unique_ID_column if necessary
# if( length(columns_for_analyte_unique_ID) > 1 ) {
#add analyte_unique_ID column if necessary
# }
# Remove columns that are not included in input column lists
if (length(
which(!colnames(data) %in%
c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)
) > 0
) {
data <- data[,-which(!colnames(data) %in%
c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)]
}
# Remove analyte annotation columns before pivoting
if( length(columns_w_additional_analyte_info) > 0 ) {
analyte_annotation_free_data <- data[,-match(columns_w_additional_analyte_info, colnames(data))]
} else {
analyte_annotation_free_data <- data
}
# If no pivot required, skip pivoting
if( length(column_w_names_of_multiple_analytes) == 0 & length(columns_w_values_for_single_analyte) >= 1 ) {
data_wide <- analyte_annotation_free_data
analyte_columns <- columns_w_values_for_single_analyte
}
# If pivoting require, pivot_wider any long-style data
if( length(column_w_names_of_multiple_analytes) == 1 ) {
data_wide <- pivot_wider(
analyte_annotation_free_data,
names_from = all_of(column_w_names_of_multiple_analytes),
values_from = all_of(column_w_values_for_multiple_analytes)
)
analyte_columns <- unlist(unique(analyte_annotation_free_data[,colnames(analyte_annotation_free_data) == column_w_names_of_multiple_analytes]))
analyte_columns <- c(columns_w_values_for_single_analyte, analyte_columns)
}
# Add sample_unique_ID_column if necessary, or just change column name of existing sample_unique_ID column
if( length(columns_w_sample_ID_info) > 1 ) {
sample_unique_IDs <- apply(
data_wide[,match(columns_w_sample_ID_info, colnames(data_wide))],
1, paste, collapse = "_"
)
if( any(duplicated(sample_unique_IDs)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
data_wide$sample_unique_ID <- sample_unique_IDs
} else {
colnames(data_wide)[colnames(data_wide) == columns_w_sample_ID_info] <- "sample_unique_ID"
if( any(duplicated(data_wide$sample_unique_ID)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
}
# Clustering analysis
# Prepare the matrix
matrix <- as.matrix(data_wide[,match(analyte_columns, colnames(data_wide))])
rownames(matrix) <- data_wide$sample_unique_ID
# Run hclust, if requested
if( analysis == "hclust" ) {
clustering <- ggplot2::fortify(ape::as.phylo(stats::hclust(stats::dist(matrix))))
clustering$sample_unique_ID <- clustering$label
}
# Add back annotations to the output
clustering <- full_join(
data_wide[,match(c(columns_w_sample_ID_info, "sample_unique_ID"), colnames(data_wide))],
clustering,
by = "sample_unique_ID"
)
rownames_matrix <- tibble::enframe(rownames(matrix), name = NULL)
colnames(rownames_matrix)[1] <- "sample_unique_ID"
clustering <- full_join(
clustering,
as_tibble(cbind(rownames_matrix, as_tibble(matrix))),
by = "sample_unique_ID"
)
clustering
# Return results
return( clustering )
}
runMatrixAnalysis(
data = AK_lakes,
analysis = c("hclust"),
column_w_multiple_analyte_names = "element",
column_w_multiple_analyte_values = "mg_per_L",
columns_w_single_analyte_values = c("water_temp", "pH"),
columns_w_analyte_annotation_info = "element_type",
columns_w_sample_ID_info = c("lake", "park")
)
runMatrixAnalysis(
data = algae_data,
analysis = c("hclust"),
column_w_multiple_analyte_names = "chemical_species",
column_w_multiple_analyte_values = "abundance",
columns_w_single_analyte_values = NULL,
columns_w_analyte_annotation_info = NULL,
columns_for_sample_unique_ID = c("algae_strain", "harvesting_regime", "replicate"),
columns_w_sample_annotation_info = c("algae_strain", "harvesting_regime", "replicate")
)
runMatrixAnalysis(
data = algae_data,
analysis = c("hclust"),
column_w_names_of_multiple_analytes = "chemical_species",
column_w_values_for_multiple_analytes = "abundance",
columns_w_values_for_single_analyte = NULL,
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("replicate", "algae_strain", "harvesting_regime")
)
per_table <- read_csv("/Users/lucasbusta/Documents/Science/Website/thebustalab.github.io/R_For_Chemists/sample_data/per_table.csv")
per_table
per_table
per_small <- read_csv("/Users/lucasbusta/Documents/Science/Website/thebustalab.github.io/R_For_Chemists/sample_data/per_table_small.csv")
head(per_small)
colnames(per_small)
runMatrixAnalysis(
data = per_small,
analysis = c("hclust"),
column_w_names_of_multiple_analytes = NULL,
column_w_values_for_multiple_analytes = NULL,
columns_w_values_for_single_analyte = c("atomic_mass_rounded", "melting_point_C", "boiling_point_C", "density_g_per_mL", "electronegativity_pauling", "first_ionization_poten_eV", "second_ionization_poten_eV", "third_ionization_poten_eV", "electron_affinity_eV", "atomic_radius_ang", "ionic_radius_ang", "covalent_radius_ang", "atomic_volume_cm3_per_mol", "electrical_conductivity_mho_per_cm", "specific_heat_J_per_g_K", "heat_of_fusion_kJ_per_mol", "heat_of_vaporization_kJ_per_mol", "thermal_conductivity_W_per_m_K", "polarizability_A_cubed", "heat_atomization_kJ_per_mol"),
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("atomic_number", "atomic_symbol", "group_number", "period", "state_at_RT")
)
ggtree(tr = per_small_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(shape = 21, aes(fill = boiling_point_C), size = 4) +
theme_classic() +
coord_cartesian(xlim = c(0,350))
per_small_clustered <- runMatrixAnalysis(
data = per_small,
analysis = c("hclust"),
column_w_names_of_multiple_analytes = NULL,
column_w_values_for_multiple_analytes = NULL,
columns_w_values_for_single_analyte = c("atomic_mass_rounded", "melting_point_C", "boiling_point_C", "density_g_per_mL", "electronegativity_pauling", "first_ionization_poten_eV", "second_ionization_poten_eV", "third_ionization_poten_eV", "electron_affinity_eV", "atomic_radius_ang", "ionic_radius_ang", "covalent_radius_ang", "atomic_volume_cm3_per_mol", "electrical_conductivity_mho_per_cm", "specific_heat_J_per_g_K", "heat_of_fusion_kJ_per_mol", "heat_of_vaporization_kJ_per_mol", "thermal_conductivity_W_per_m_K", "polarizability_A_cubed", "heat_atomization_kJ_per_mol"),
columns_w_additional_analyte_info = NULL,
columns_w_sample_ID_info = c("atomic_number", "atomic_symbol", "group_number", "period", "state_at_RT")
)
ggtree(tr = per_small_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(shape = 21, aes(fill = boiling_point_C), size = 4) +
theme_classic() +
coord_cartesian(xlim = c(0,350))
ggtree(tr = per_small_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(shape = 21, aes(fill = boiling_point_C), size = 4) +
theme_classic() +
coord_cartesian(xlim = c(0,35000))
ggtree(tr = per_small_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(shape = 21, aes(fill = boiling_point_C), size = 4) +
theme_classic() +
coord_cartesian(xlim = c(0,5000))
ggtree(tr = per_small_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(shape = 21, aes(fill = boiling_point_C), size = 2) +
theme_classic() +
coord_cartesian(xlim = c(0,5000))
ggtree(tr = per_small_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(shape = 21, aes(fill = group_number), size = 2) +
theme_classic() +
coord_cartesian(xlim = c(0,5000))
ggtree(tr = per_small_clustered) +
geom_tiplab(offset = 10) +
geom_tippoint(shape = 21, aes(fill = period), size = 2) +
theme_classic() +
coord_cartesian(xlim = c(0,5000))
