[
["setting-up-a-phylochemistry-analysis.html", "Chapter 2 Setting up a phylochemistry analysis 2.1 Installing phylochemistry directly from github and view documentation contents 2.2 Conventions in phylochemsitry", " Chapter 2 Setting up a phylochemistry analysis phylochemistry is not just a set of functions that helps with analyses. It is also a conceptual and organizational framework that helps you perform analyses efficiently and with versatility. It takes a few minutes to understand and set up a phylochemistry analysis, but that investment will be paid back many-fold over the course of a project’s lifetime. 2.1 Installing phylochemistry directly from github and view documentation contents devtools::install_github(&quot;LucasBusta/phylochemistry&quot;, quiet = FALSE, force = TRUE) ## Downloading GitHub repo LucasBusta/phylochemistry@master ## checking for file ‘/private/var/folders/d4/m9ll00q10hdd6kz0vk9q0nx80000gn/T/Rtmp3VHq6q/remotes461a14dd1d24/LucasBusta-phylochemistry-6209243/DESCRIPTION’ ... ✓ checking for file ‘/private/var/folders/d4/m9ll00q10hdd6kz0vk9q0nx80000gn/T/Rtmp3VHq6q/remotes461a14dd1d24/LucasBusta-phylochemistry-6209243/DESCRIPTION’ ## ─ preparing ‘phylochemistry’: ## checking DESCRIPTION meta-information ... ✓ checking DESCRIPTION meta-information ## ─ checking for LF line-endings in source and make files and shell scripts ## ─ checking for empty or unneeded directories ## ─ building ‘phylochemistry_0.0.0.9000.tar.gz’ ## ## packages &lt;- c(&quot;phylochemistry&quot;) lapply(packages, require, character.only = TRUE) ## Loading required package: phylochemistry ## Warning: replacing previous import &#39;ggtree::expand&#39; by &#39;tidyr::expand&#39; when ## loading &#39;phylochemistry&#39; ## [[1]] ## [1] TRUE help(package = &quot;phylochemistry&quot;) 2.2 Conventions in phylochemsitry 2.2.1 File paths and directory paths phylochemistry is made to run both on data from single sources (for example, one species) or multiple sources (for example, multiple species) at the same time. This means that sometimes a function will run using a single file, or sometimes you will want to feed it multiple files. In cases where a function wants a single file, it will request a “file_path”, which is an explicit path to a single file (for example, “Desktop/project/file.csv”). Other times, a function will want a directory instead of a specific file, in which case it will request a “directory_path”. This is a path to a directory and it ends with a slash (for example, “Desktop/project/”). 2.2.2 Monolists One way to think of phylochemistry is as a set of tools that enables you to integrate and analyze raw data stored on your hard drive. Let’s use the example dataset included with phylochemistry to explore this idea. First, let’s load the phylochemistry library and set up our phylochemistry directory: library(phylochemistry) phylochemistry_example_dir &lt;- &quot;/Users/lucasbusta/Desktop/phylochemistry_example_data/&quot; phylochemistry_example_dir ## [1] &quot;/Users/lucasbusta/Desktop/phylochemistry_example_data/&quot; Now, let’s see what’s in that directory dir(phylochemistry_example_dir) ## [1] &quot;monolists&quot; &quot;raw_data&quot; &quot;sequences_by_species&quot; ## [4] &quot;sequences_of_interest&quot; We can see that there’s a folder called monolists. What’s in there? dir(paste0(phylochemistry_example_dir, &quot;monolists/&quot;)) ## [1] &quot;blast_hits.csv&quot; &quot;GCMS_samples_updated.csv&quot; ## [3] &quot;GCMS_samples.csv&quot; &quot;peak_list_example.csv&quot; ## [5] &quot;peak_list.csv&quot; 2.2.3 Recommendations The ideas in this section are not required for phylochemistry commands to run, but they are helpful and can make your life easier. 2.2.3.1 Storing your data as a list of lists There are lots of different kinds of data structures. phylochemistry was designed with a very simple and flexible data structure in mind: a heirarchy of lists. These are very easy to create and modify: my_analysis &lt;- list() my_analysis$GCMS_samples &lt;- readMonolist(monolist_in_path = paste0(phylochemistry_example_dir, &quot;monolists/GCMS_samples.csv&quot;)) str(my_analysis) ## List of 1 ## $ GCMS_samples:&#39;data.frame&#39;: 9 obs. of 4 variables: ## ..$ sample_name : chr [1:9] &quot;10_10_1&quot; &quot;10_10_2&quot; &quot;10_10_3&quot; &quot;10_20_1&quot; ... ## ..$ amount_internal_std_in_ul : int [1:9] 10 10 10 10 10 10 10 10 10 ## ..$ amount_mixed_analyte_std_in_ul: int [1:9] 10 10 10 20 20 20 30 30 30 ## ..$ replicate : int [1:9] 1 2 3 1 2 3 1 2 3 When we run str() on “my_analysis”, it shows us the structure of the “my_analysis” object. In the output above, we can see that “my_analysis” is a list of Now we have the information about the GC-MS samples stored in a This is a list of chromatography samples and how much of two different types of standards are in each. 2.2.3.2 in that case… Computational work nearly always requires the analyst to use multiple programs to complete a project. Some programs can handle a great variety of special characters, and some cannot. Consider using snake case when naming your objects and files - it can increase campatibility! All phylochemistry functions are called using camelCase. All argument names in phylochemistry functions use snake_case. "]
]
