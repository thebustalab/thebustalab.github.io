stop("There is a mismatch in the column names delivered to the command and the column names in your data. Please double check the spelling of your column names you gave to the command.")
}
# Add analyte_unique_ID_column if necessary
# if( length(columns_for_analyte_unique_ID) > 1 ) {
#add analyte_unique_ID column if necessary
# }
# Remove columns that are not included in input column lists
if (length(
which(!colnames(data) %in%
c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)
) > 0
) {
data <- data[,-which(!colnames(data) %in%
c(
column_w_names_of_multiple_analytes,
column_w_values_for_multiple_analytes,
columns_w_values_for_single_analyte,
columns_w_additional_analyte_info,
columns_w_sample_ID_info
)
)]
}
# Check for duplicate analyte names
if( length(columns_w_values_for_single_analyte) > 0 ) {
if( any(duplicated(columns_w_values_for_single_analyte)) ) {
stop("There are duplicate analyte names.")
}
}
if( length(column_w_names_of_multiple_analytes) == 1 ) {
n_unique_groups <- table(duplicated(data[,colnames(data) %in% columns_w_sample_ID_info]))[1]
analyte_breakdown <- table(duplicated(data[,colnames(data) == column_w_names_of_multiple_analytes]))
n_unique_groups_of_analytes <- sum(analyte_breakdown)/analyte_breakdown[1]
if (n_unique_groups != n_unique_groups_of_analytes) {
stop("The variables you have specified in columns_w_sample_ID_info do not define groups of samples with unique sets of analytes. You probably need to add more variables to columns_w_sample_ID_info.")
}
}
# Remove analyte annotation columns before pivoting
if( length(columns_w_additional_analyte_info) > 0 ) {
analyte_annotation_free_data <- data[,-match(columns_w_additional_analyte_info, colnames(data))]
} else {
analyte_annotation_free_data <- data
}
# If no pivot required, skip pivoting
if( length(column_w_names_of_multiple_analytes) == 0 & length(columns_w_values_for_single_analyte) >= 1 ) {
data_wide <- analyte_annotation_free_data
analyte_columns <- columns_w_values_for_single_analyte
data_wide <- unique(data_wide)
}
# If pivoting required, pivot_wider any long-style data
if( length(column_w_names_of_multiple_analytes) == 1 ) {
data_wide <- pivot_wider(
analyte_annotation_free_data,
names_from = all_of(column_w_names_of_multiple_analytes),
values_from = all_of(column_w_values_for_multiple_analytes)
)
analyte_columns <- unlist(unique(analyte_annotation_free_data[,colnames(analyte_annotation_free_data) == column_w_names_of_multiple_analytes]))
analyte_columns <- c(columns_w_values_for_single_analyte, analyte_columns)
}
# Check to see if analyte columns are numeric
which_analyte_columns <- which(colnames(data_wide) %in% analyte_columns)
are_they_numeric <- list()
for( i in which_analyte_columns ) {
are_they_numeric <- c(are_they_numeric, is.numeric(data_wide[[i]]))
}
## Convert all to numeric?
# for( i in which_analyte_columns ) {
#   data_wide[[i]] <- as.numeric(data_wide[[i]])
# }
# Should selected analysis proceed?
if ( all(unlist(are_they_numeric)) ) {
if ( analysis %in% c("pca", "pca_dim", "pca_ord", "hclust", "hclust_phylo") ) {
cat("Analytes are all numeric and compatible with the analysis selected.\n")
}
if ( analysis %in% c("mca", "mca_ord", "mca_dim") ) {
stop("Analytes are all numeric, but the analysis selected is for categorical variables. Please choose a different analysis method.\n")
}
}
if ( !all(unlist(are_they_numeric)) ) {
if (analysis %in% c("mca", "mca_ord", "mca_dim")) {
cat("Analytes are all categorical and compatible with the analysis selected.\n")
}
if ( analysis %in% c("pca", "pca_dim", "pca_ord", "hclust", "hclust_phylo") ) {
stop("Analytes are all categorical, but the analysis selected is for numeric variables. Please choose a different analysis method.\n")
}
}
# if (    all(
#             c( !all(unlist(are_they_numeric)), all(unlist(are_they_numeric)) )
#         )
# ) {
#     if (analysis %in% c("mca")) {
#         cat("Analytes are mixed and ...")
#     }
# }
# Add sample_unique_ID_column if necessary, or just change column name of existing sample_unique_ID column
if( length(columns_w_sample_ID_info) > 1 ) {
sample_unique_IDs <- apply(
data_wide[,match(columns_w_sample_ID_info, colnames(data_wide))],
1, paste, collapse = "_"
)
if( any(duplicated(sample_unique_IDs)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
data_wide$sample_unique_ID <- sample_unique_IDs
} else {
colnames(data_wide)[colnames(data_wide) == columns_w_sample_ID_info] <- "sample_unique_ID"
if( any(duplicated(data_wide$sample_unique_ID)) ) {stop("columns_w_sample_ID_info specified do not lead to unique sample IDs")}
}
# Make sure "sample_unique_ID" is character
data_wide$sample_unique_ID <- as.character(data_wide$sample_unique_ID)
# Prepare the Matrix for analysis - Clustering analysis
# Prepare the matrix
matrix <- as.data.frame(data_wide[,match(analyte_columns, colnames(data_wide))])
rownames(matrix) <- data_wide$sample_unique_ID
# Replace NAs with colmeans
if( na_replacement[1] == "none") {
}
if( na_replacement[1] == "drop" ) {
cat("Dropping any variables in your dataset that have NA as a value.\nVariables dropped:\n")
if (length(names(which(apply(is.na(matrix), 2, any)))) > 0) {
cat(names(which(apply(is.na(matrix), 2, any))))
} else {
cat("none")
}
cat("\n")
matrix <- matrix[,!apply(is.na(matrix), 2, any)]
}
if( na_replacement[1] %in% c("zero", "mean") ) {
if( any(is.na(matrix)) ) {
cat(paste0("Replacing NAs in your data with ", na_replacement), "\n")
for( column in 1:dim(matrix)[2]) {
if( any(is.na(matrix[,column])) ) {
if( na_replacement == "mean" ) {
replacement <- mean(matrix[,column], na.rm = TRUE)
}
if( na_replacement == "zero" ) {
replacement <- 0
}
if( !any(na_replacement %in% c("mean", "zero")) ) {
stop("Your data contains NAs. Please specify how to deal with them using na_replacement. \n")
}
matrix[,column][is.na(matrix[,column])] <- replacement
} else {}
}
}
}
# Transpose matrix, if requested
if( transpose == TRUE ) { matrix <- t(matrix) }
# Run unknown, if requested
if( length(unknown_sample_ID_info) > 0 ) {
## Use na_replacement != "drop"
if( na_replacement != "drop" ) {
stop("It is highly recommended that you use na_replacement = \"drop\" when matching an unknown, since anything with an NA value will be sent to the bottom of the matching list.")
}
## Separate unknown and knowns matrix
sample_ID_of_unknown <- unknown_sample_ID_info
index_of_unknown <- which(rownames(matrix) == sample_ID_of_unknown)
unknown <- matrix[index_of_unknown,]
matrix_minus_unknown <- matrix[-c(index_of_unknown),]
## Identify how many knowns there are to test
indices_to_test <- seq(1, dim(matrix_minus_unknown)[1], 1)
## Loop and select 20 nearest neighbors until there are just 100 left
while( length(indices_to_test) > 100 ) { ## Has been optimized for 50, 100, and 1000 indeces bites. 100 and 1000 both take ~5s.
## Select 100 entries at random, subset matrix_minus_unknown for that, append the unknowns
indices_being_tested <- sample(indices_to_test, 100, replace = FALSE)
matrix_to_be_tested <- matrix_minus_unknown[indices_being_tested,]
matrix_to_be_tested <- rbind(unknown, matrix_to_be_tested)
dist <- Rfast::Dist(matrix_to_be_tested)
results <- data.frame(
distance = dist[2:dim(dist)[1], 1],
index = indices_being_tested
)
## Keep closest 20 indices, modify indices_to_test
indices_to_keep <- results[order(results$distance),]$index[1:20]
indices_to_toss <- indices_being_tested[!indices_being_tested %in% indices_to_keep]
indices_to_test <- indices_to_test[!indices_to_test %in% indices_to_toss]
}
## Test the last 100 neighbors and return the closest 10
final_matrix_to_be_tested <- rbind(unknown, matrix_minus_unknown[indices_to_test,])
dist <- Rfast::Dist(final_matrix_to_be_tested)
results <- data.frame(
distance = dist[2:dim(dist)[1], 1],
index = indices_to_test
)
if( length(indices_to_test) < 10 ) {
number_for_final_tree <- length(indices_to_test)
} else {
number_for_final_tree <- 10
}
indices_to_keep <- results[order(results$distance),]$index[1:number_for_final_tree]
indices_to_keep
## Subset the matrix
matrix <- rbind(unknown, matrix_minus_unknown[indices_to_keep,])
### THINK CAREFULLY HERE! THINGS SOMEWHAT CLOSE TO THE UNKNOWN
### MIGHT NOT CLUSTER DIRECTLY WITH IT
### DEPENDING ON HOW RELATED THEY ARE TO OTHER THINGS
}
## MCA ##
if( analysis == "mca" ) {
cat("Running Multiple Correspondence Analysis, extracting sample coordinates...\n")
coords <- FactoMineR::MCA(matrix, graph = FALSE)$ind$coord[,c(1:2)]
clustering <- as_tibble(coords)
clustering$sample_unique_ID <- rownames(coords)
colnames(clustering) <- c("Dim_1", "Dim_2", "sample_unique_ID")
cat("Done!")
}
if( analysis == "mca_ord" ) {
cat("Running Multiple Correspondence Analysis, extracting ordination plot...\n")
coords <- FactoMineR::MCA(matrix, graph = FALSE)$var$coord[,c(1,2)]
clustering <- as_tibble(coords)
clustering$analyte <- rownames(coords)
colnames(clustering) <- c("Dim_1", "Dim_2", "analyte")
clustering <- select(clustering, analyte, Dim_1, Dim_2)
return(clustering)
stop("Returning ordination plot coordinates. \nDone!")
}
if( analysis == "mca_dim" ) {
cat("Running Multiple Correspondence Analysis, extracting dimensional contributions...\n")
coords <- FactoMineR::MCA(matrix, graph = FALSE)$eig[,2]
clustering <- tibble::enframe(coords, name = NULL)
clustering$principal_component <- names(coords)
clustering$principal_component <- as.numeric(gsub("dim ", "", clustering$principal_component))
colnames(clustering)[colnames(clustering) == "value"] <- "percent_variance_explained"
clustering <- select(clustering, principal_component, percent_variance_explained)
return(clustering)
stop("Returning eigenvalues. \nDone!")
}
## HCLUST, HCLUST_PHYLO ##
if( analysis == "hclust" ) {
phylo <- ape::as.phylo(stats::hclust(stats::dist(matrix)))
clustering <- ggtree::fortify(phylo)
clustering$sample_unique_ID <- clustering$label
}
if( analysis == "hclust_phylo" ) {
phylo <- ape::as.phylo(stats::hclust(stats::dist(matrix)))
# clustering <- ggtree::fortify(phylo)
# clustering$sample_unique_ID <- clustering$label
return(phylo)
stop("Returning hclust_phylo.")
}
## PCA, PCA_ORD, PCA_DIM ##
if( analysis == "pca" ) {
if( scale_variance == TRUE ) {
coords <- FactoMineR::PCA(matrix, graph = FALSE)$ind$coord[,c(1:2)]
} else {
coords <- FactoMineR::PCA(matrix, graph = FALSE, scale.unit = FALSE)$ind$coord[,c(1:2)]
}
clustering <- as_tibble(coords)
clustering$sample_unique_ID <- rownames(coords)
}
if( analysis == "pca_ord" ) {
if( scale_variance == TRUE ) {
coords <- FactoMineR::PCA(matrix, graph = FALSE)$var$coord[,c(1,2)]
} else {
coords <- FactoMineR::PCA(matrix, graph = FALSE, scale.unit = FALSE)$var$coord[,c(1,2)]
}
clustering <- as_tibble(coords)
clustering$analyte <- rownames(coords)
clustering <- select(clustering, analyte, Dim.1, Dim.2)
return(clustering)
stop("Returning ordination plot coordinates.")
}
if( analysis == "pca_dim" ) {
if( scale_variance == TRUE ) {
coords <- FactoMineR::PCA(matrix, graph = FALSE)$eig[,2]
} else {
coords <- FactoMineR::PCA(matrix, graph = FALSE, scale.unit = FALSE)$eig[,2]
}
clustering <- tibble::enframe(coords, name = NULL)
clustering$principal_component <- names(coords)
clustering$principal_component <- as.numeric(gsub("comp ", "", clustering$principal_component))
colnames(clustering)[colnames(clustering) == "value"] <- "percent_variance_explained"
clustering <- select(clustering, principal_component, percent_variance_explained)
return(clustering)
stop("Returning eigenvalues.")
}
## K-MEANS ##
if( kmeans[1] %in% c("none", FALSE) ) {}
if( !kmeans[1] %in% c("none", FALSE) ) {
## Check for NAs
if( any(is.na(matrix)) == TRUE ) {
stop("kmeans cannot handle NA. Please choose an option for na_replacement.")
}
## Run k-means
kmeans_results <- list()
for( i in 1:(dim(matrix)[1]-1) ) {
kmeans_results[[i]] <- sum(stats::kmeans(x = matrix, centers = i, nstart = 25, iter.max = 1000)$withinss)
}
kmeans_results <- do.call(rbind, kmeans_results)
kmeans_results
## If auto, determine sharpest angle and return clusters
if( kmeans[1] == "auto" ) {
angles <- list()
for( i in 1:(length(kmeans_results)-2) ) {
slope_1 <- kmeans_results[i+1] - kmeans_results[i]
slope_2 <- kmeans_results[i+2] - kmeans_results[i+1]
angles[[i]] <- atan( (slope_1 - slope_2) / (1 + slope_1*slope_2) )
}
angles <- do.call(rbind, angles)
cluster_number <- which(angles == min(angles)) + 1
kmeans_clusters <- stats::kmeans(x = matrix, centers = cluster_number, nstart = 25, iter.max = 1000)$cluster
}
## If scree, return raw results
if( kmeans[1] == "elbow" ) {
results <- as_tibble(data.frame(
cluster_number = seq(1, dim(kmeans_results)[1], 1),
variance_within_cluster = kmeans_results
))
return( results )
stop("Returning elbow plot.")
}
## If a number, return that many clusters
if( !kmeans[1] %in% c("auto", "elbow") ) {
if( is.na(as.numeric(kmeans[1])) ) {stop("For kmeans, please use 'none', 'auto', 'elbow', or a number.")}
kmeans_clusters <- stats::kmeans(x = matrix, centers = as.numeric(kmeans[1]), nstart = 25, iter.max = 1000)$cluster
}
## Bind kmeans cluster numbers to output
kmeans_clusters <- as_tibble(data.frame(sample_unique_ID = names(kmeans_clusters), kmeans_cluster = paste0("cluster_", kmeans_clusters)))
clustering$kmeans_cluster <- kmeans_clusters$kmeans_cluster[match(clustering$sample_unique_ID, kmeans_clusters$sample_unique_ID)]
}
# If transpose = TRUE, then return without annotations
if( transpose == TRUE ) {
return(clustering)
stop("Returning transposed cluster output. Make sure all your variables have the same units!")
}
# Post processing and return.
if( !analysis %in% c("hclust_phylo")) {
## Add back annotations to the output
if( length(columns_w_sample_ID_info) == 1 ) {
} else {
clustering <-   right_join(
data_wide[,match(
c(columns_w_sample_ID_info, "sample_unique_ID"),
colnames(data_wide))
], clustering, by = "sample_unique_ID"
)
}
rownames_matrix <- tibble::enframe(rownames(matrix), name = NULL)
colnames(rownames_matrix)[1] <- "sample_unique_ID"
clustering <- full_join(
clustering,
as_tibble(cbind(rownames_matrix, as_tibble(matrix))),
by = "sample_unique_ID"
)
clustering
clustering <- select(clustering, sample_unique_ID, everything())
# Annotate internal branches if tree output
if( analysis == "hclust" ) {
for( node in dplyr::filter(clustering, isTip == FALSE)$node ) {
for (sample_property in colnames(clustering)[colnames(clustering) %in% columns_w_sample_ID_info] ) {
descends <- clustering[clustering$node %in% ips::descendants(phylo, node),]
if ( table(duplicated(descends[,colnames(descends) == sample_property]))[1] == 1 ) {
clustering[
which(clustering$node == node),
which(colnames(clustering) == sample_property)
] <- descends[,colnames(descends) == sample_property][1,1]
}
}
}
}
# Return results
if( output_format[1] == "long" ) {
clustering <- pivot_longer(
clustering,
cols = c(which(colnames(clustering) == analyte_columns[1]): dim(clustering)[2]),
names_to = "analyte_name",
values_to = "value"
)
}
return( clustering )
}
}
algae_data_clustered <- runMatrixAnalysis(
data=algae_data,
analysis="hclust",
columns_w_sample_ID_info = c("algae_strain", "replicate"),
columns_w_additional_analyte_info = NULL,
column_w_names_of_multiple_analytes = "chemical_species",
column_w_values_for_multiple_analytes = "abundance"
)
algae_data_clustered <- runMatrixAnalysis(
data=algae_data,
analysis="hclust",
columns_w_sample_ID_info = c("algae_strain", "replicate", "harvesting_regime"),
columns_w_additional_analyte_info = NULL,
column_w_names_of_multiple_analytes = "chemical_species",
column_w_values_for_multiple_analytes = "abundance"
)
algae_data_clustered <- runMatrixAnalysis(
data=algae_data,
analysis="hclust",
columns_w_sample_ID_info = c("algae_strain", "harvesting_regime"),
columns_w_additional_analyte_info = NULL,
column_w_names_of_multiple_analytes = "chemical_species",
column_w_values_for_multiple_analytes = "abundance"
)
install.packages("chromer")
library(chromer)
sol_gen <- chrom_counts(taxa = "Solanum", rank = "genus")
head(sol_gen)
nrow(sol_gen)
ggplot() +
geom_point(data = sol_gen, aes(x = sporophytic, y = gametophytic))
source("~/.active-rstudio-document", echo = TRUE)
library(chromer)
library(tidyverse)
sol_gen <- chrom_counts(taxa = "Solanum", rank = "genus")
head(sol_gen)
nrow(sol_gen)
ggplot() +
geom_point(data = sol_gen, aes(x = sporophytic, y = gametophytic))
sol_gen$resolved_binomial
table(sol_gen$resolved_binomial)
data.frame(table(sol_gen$resolved_binomial))
freq_data <- data.frame(table(sol_gen$resolved_binomial))
ggplot() +
geom_col(data = freq_data, aes(x = Freq, y = Var1))
freq_data <- data.frame(table(sol_gen$resolved_binomial))
freq_data <- filter(freq_data, Freq > 50)
ggplot() +
geom_col(data = freq_data, aes(x = Freq, y = Var1))
freq_data <- data.frame(table(sol_gen$resolved_binomial))
freq_data <- filter(freq_data, Freq > 25)
ggplot() +
geom_col(data = freq_data, aes(x = Freq, y = Var1))
freq_data <- data.frame(table(sol_gen$resolved_binomial))
freq_data <- filter(freq_data, Freq > 20)
ggplot() +
geom_col(data = freq_data, aes(x = Freq, y = Var1))
sol_gen
freq_data
freq_data$Var1
species_of_interest <- freq_data$Var1
sol_gen
filter(sol_gen, resolved_binomial %in% species_of_interest)
sol_gen
species_of_interest
filter(sol_gen, resolved_binomial %in% as.character(species_of_interest))
species_of_interest <- unlist(freq_data$Var1)
species_of_interest
species_of_interest <- as.character(freq_data$Var1)
species_of_interest
filter(sol_gen, resolved_binomial %in% species_of_interest)
dplyr::filter(sol_gen, resolved_binomial %in% species_of_interest)
sol_gen[sol_gen$resolved_binomial %in% species_of_interest,]
sol_gen$resolved_binomial
sol_gen$resolved_binomial %in% species_of_interest
c(1,2,3,4,6)
c("A", "B", "z")
c("A", "B", "z")[2]
c("A", "B", "z")[3]
c("A", "B", "z")[c(TRUE, FALSE, FALSE)]
sol_gen_species_of_interest <- sol_gen[sol_gen$resolved_binomial %in% species_of_interest,]
sol_gen_species_of_interest
ggplot() +
geom_point(data = sol_gen_species_of_interest, aes(x = gametophytic, y = resolved_binomial))
ggplot() +
geom_point(data = sol_gen_species_of_interest, aes(x = sporophytic, y = resolved_binomial))
table(sol_gen_species_of_interest$gametophytic)
sol_gen_species_of_interest %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n())
sol_gen_species_of_interest %>%
filter(sporophytic != "") %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n())
sol_gen_species_of_interest %>%
filter(sporophytic != "") %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n())
sol_gen_species_of_interest %>%
filter(sporophytic != "")
source("https://thebustalab.github.io/phylochemistry/phylochemistry.R")
sol_gen_species_of_interest %>%
filter(sporophytic != "") %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n())
sol_gen_species_of_interest %>%
dplyr::filter(sporophytic != "") %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n())
sol_gen_species_of_interest
source("~/.active-rstudio-document", echo = TRUE)
sol_gen_species_of_interest %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n())
sol_gen_species_of_interest %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n()) %>%
ggplot(aes(y = resolved_binomial, x = sporophytic, fill = n)) + geom_tile()
ggplot() +
geom_col(data = freq_data, aes(x = Freq, y = Var1))
ggplot() +
geom_col(data = freq_data, aes(x = Freq, y = Var1)) -> plot1
species_of_interest <- freq_data$Var1
## Filter the original dataset for those species with the higest number of reports
# filter(sol_gen, resolved_binomial %in% species_of_interest) ??? why doesnt it work?? not sure :(
sol_gen_species_of_interest <- sol_gen[sol_gen$resolved_binomial %in% species_of_interest,]
sol_gen_species_of_interest
ggplot() +
geom_point(data = sol_gen_species_of_interest, aes(x = sporophytic, y = resolved_binomial))
sol_gen_species_of_interest %>%
group_by(sporophytic, resolved_binomial) %>%
summarize(n = n()) %>%
ggplot(aes(y = resolved_binomial, x = sporophytic, fill = n)) + geom_tile() -> plot2
plot_grid(plot1, plot2, align = "h")
/Volumes/PIHM3/phylochemistry.R
source("/Volumes/PIHM3/phylochemistry.R")
